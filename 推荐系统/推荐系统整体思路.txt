一、推荐系统是信息过载所采用的措施，面对海量的数据信息，
从中快速推荐出符合用户特点的物品。解决一些人的“选择
恐惧症”；面向没有明确需求的人。
• 解决如何从大量信息中找到自己感兴趣的信息。
• 解决如何让自己生产的信息脱颖而出，受到大众的喜爱。

二、推荐系统的基本思想
利用用户和物品的特征信息，给用户推荐那些具有用户喜欢的特征的物品。
• 利用用户喜欢过的物品，给用户推荐与他喜欢过的物品相似的物品。 • 利用和用户相似的其他用户，给用户推荐那些和他们兴趣爱好相似的其他用
户喜欢的物品。

要推荐物品或内容的元数据，例如关键字，分类标签，基因描述等；
• 系统用户的基本信息，例如性别，年龄，兴趣标签等
• 用户的行为数据，可以转化为对物品或者信息的偏好，根据应用本身的不同，
可能包括用户对物品的评分，用户查看物品的记录，用户的购买记录等。这
些用户的偏好信息可以分为两类：
– 显式的用户反馈：这类是用户在网站上自然浏览或者使用网站以外，显式的提供
反馈信息，例如用户对物品的评分，或者对物品的评论。
– 隐式的用户反馈：这类是用户在使用网站是产生的数据，隐式的反应了用户对物
品的喜好，例如用户购买了某物品，用户查看了某物品的信息等等。

三、推荐系统的分类
• 根据推荐是否个性化分类
– 基于统计的推荐
– 个性化推荐

• 根据数据源分类
– 基于人口统计学的推荐
– 基于内容的推荐
– 基于协同过滤的推荐

• 根据实时性分类
– 离线推荐
– 实时推荐

• 根据推荐原则分类
– 基于相似度的推荐
– 基于知识的推荐
– 基于模型的推荐

四、统计推荐模块
历史热门商品统计
近期热门商品统计
商品平均评分统计

离线推荐服务是综合用户所有的历史数据，利用设定的离线统计算法和离线推荐算法周期性的进行结果统计与保存，计算的结果在一定时间周期内是固定不变的，变更的频率取决于算法调度的频率。
离线推荐服务主要计算一些可以预先进行统计和计算的指标，为实时计算和前端业务相应提供数据支撑。
离线推荐服务主要分为统计推荐、基于隐语义模型的协同过滤推荐以及基于内容和基于Item-CF的相似推荐。


五、基于LFM的离线推荐模块
用ALS算法训练隐语义模型）（LFM）
计算用户推荐矩阵
计算商品相似度推荐矩阵

基于隐语义模型的协同过滤推荐
项目采用ALS作为协同过滤算法，根据MongoDB中的用户评分表计算离线的用户商品推荐列表以及商品相似度矩阵。

用户商品推荐列表
通过ALS训练出来的Model来计算所有当前用户商品的推荐列表，主要思路如下：
1.userId和productId做笛卡尔积，产生（userId，productId）的元组
2.通过模型预测（userId，productId）对应的评分。
3.将预测结果通过预测分值进行排序。
4.返回分值最大的K个商品，作为当前用户的推荐列表。

通过RMSE来选择最优的参数划分测试集和训练数据集，不同参数在测试集上的RMSE最少则为最优参数


六、基于模型的实时推荐模块
实时计算与离线计算应用于推荐系统上最大的不同在于实时计算推荐结果应该反映最近一段时间用户近期的偏好，而离线计算推荐结果则是根据用户从第一次评分起的所有评分记录来计算用户总体的偏好。
在实时推荐中由于时间性能上要满足实时或者准实时的要求，所以算法的计算量不能太大，避免复杂、过多的计算造成用户体验的下降。鉴于此，推荐精度往往不会很高。实时推荐系统更关心推荐结果的动态变化能力，只要更新推荐结果的理由合理即可，至于推荐的精度要求则可以适当放宽。
计算速度要快
结果可以不是很精确
有预先设计好的推荐模型

当用户u 对商品p 进行了评分，将触发一次对u 的推荐结果的更新。由于用户u 对商品p 评分，对于用户u 来说，他与p 最相似的商品们之间的推荐强度将发生变化，所以选取与商品p 最相似的K 个商品作为候选商品。
每个候选商品按照“推荐优先级”这一权重作为衡量这个商品被推荐给用户u 的优先级。
这些商品将根据用户u 最近的若干评分计算出各自对用户u 的推荐优先级，然后与上次对用户u 的实时推荐结果的进行基于推荐优先级的合并、替换得到更新后的推荐结果。
推荐优先度计算
基本原理：用户最近一段时间的口味相似的
总之，实时推荐算法流程流程基本如下：
（1）用户u 对商品p 进行了评分，触发了实时推荐的一次计算；
（2）选出商品p 最相似的K 个商品作为集合S；
（3）获取用户u 最近时间内的K 条评分，包含本次评分，作为集合RK；
（4）计算商品的推荐优先级，产生<qID,>集合updated_S；
将updated_S 与上次对用户u 的推荐结果Rec 利用公式进行合并，产生新的推荐结果NewRec；作为最终输出。

实时推荐的数据流向是：业务系统 -> 日志 -> flume 日志采集 -> kafka streaming数据清洗和预处理 -> spark streaming 流式计算。


冷启动问题处理
整个推荐系统更多的是依赖于用于的偏好信息进行商品的推荐，那么就会存在一个问题，对于新注册的用户是没有任何偏好信息记录的，那这个时候推荐就会出现问题，导致没有任何推荐的项目出现。
处理这个问题一般是通过当用户首次登陆时，为用户提供交互式的窗口来获取用户对于物品的偏好，让用户勾选预设的兴趣标签。
当获取用户的偏好之后，就可以直接给出相应类型商品的推荐。

七、基于内容的相似推荐
原始数据中的tag文件，是用户给商品打上的标签，这部分内容想要直接转成评分并不容易，不过我们可以将标签内容进行提取，得到商品的内容特征向量，进而可以通过求取相似度矩阵。这部分可以与实时推荐系统直接对接，计算出与用户当前评分商品的相似商品，实现基于内容的实时推荐。为了避免热门标签对特征提取的影响，我们还可以通过TF-IDF算法对标签的权重进行调整，从而尽可能地接近用户偏好。通过商品特征向量进而求出相似度矩阵，就可以在商品详情页给出相似推荐了；通常在电商网站中，用户浏览商品或者购买完成之后，都会显示类似的推荐列表。
得到的相似度矩阵也可以为实时推荐提供基础，得到用户推荐列表。可以看出，基于内容和基于隐语义模型，目的都是为了提取出物品的特征向量，从而可以计算出相似度矩阵。而实时推荐系统算法正是基于相似度来定义的。

八、其他形式的离线相似推荐
基于物品的协同过滤推荐
基于物品的协同过滤（Item-CF），只需收集用户的常规行为数据（比如点击、收藏、购买）就可以得到商品间的相似度，在实际项目中应用很广。
我们的整体思想是，如果两个商品有同样的受众（感兴趣的人群），那么它们就是有内在相关性的。所以可以利用已有的行为数据，分析商品受众的相似程度，进而得出商品间的相似度。我们把这种方法定义为物品的“同现相似度”。
